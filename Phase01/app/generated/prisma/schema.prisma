generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Course {
  id                        String   @id
  crn                       Int      @unique
  name                      String
  category                  String
  description               String
  instructor                String
  openForRegistration       Boolean
  adminApprove              Boolean
  totalSeats                Int
  availableSeats            Int
  hasStarted                Boolean
  creditHours               Int
  isPublishedForInstructors Boolean?
  assignmentConfirmed       Boolean
  interestDeadline          DateTime

  // Relations
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int      @unique

  registeredUsers       User[] @relation("RegisteredCourses")
  interestedInstructors User[] @relation("InterestedCourses")
  assignedToInstructor  User?  @relation("AssignedInstructor", fields: [assignedInstructorId], references: [id])
  assignedInstructorId  Int?

  prerequisites Course[] @relation("CoursePrerequisites")
  requiredFor   Course[] @relation("CoursePrerequisites")
}

model Schedule {
  id        Int           @id @default(autoincrement())
  startTime String
  endTime   String
  days      ScheduleDay[]

  course Course?
}

model ScheduleDay {
  id         Int      @id @default(autoincrement())
  day        Day
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
}

model User {
  id               Int     @id
  name             String?
  email            String  @unique
  password         String
  role             Role
  gpa              Float?
  major            String?
  creditsCompleted Int?

  // Student relations
  completedCourses  CompletedCourse[]
  registeredCourses Course[]          @relation("RegisteredCourses")

  // Instructor relations
  interestedCourses Course[] @relation("InterestedCourses")
  assignedCourses   Course[] @relation("AssignedInstructor")

  // Additional normalized fields for strings
  expertise        Expertise[]
  responsibilities Responsibility[]
  // list of all the third-party login records  
  accounts         Account[]
  // list of all active login sessions that belong to this user
  sessions         Session[]
}

model Expertise {
  id     Int    @id @default(autoincrement())
  value  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model Responsibility {
  id     Int    @id @default(autoincrement())
  value  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model CompletedCourse {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  courseId    String
  name        String
  crn         Int
  creditHours Int
  grade       String
  category    String
  instructor  String?
}

enum Role {
  student
  instructor
  admin
}

enum Day {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

model Account {
  id                String  @id @default(cuid(2))
  userId            Int // foreign key 
  type              String  @unique
  provider          String  @unique
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid(2))
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
}
